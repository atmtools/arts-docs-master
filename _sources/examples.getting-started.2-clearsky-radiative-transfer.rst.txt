2. Clearsky radiative transfer
==============================
Zeeman
------
.. code-block:: python
    :name: Zeeman
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.propagation_pathGeometric(pos=pos, los=los, max_step=1000.)
    ws.spectral_radianceClearskyEmission()
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [2.27786383e02, -1.99350269e-05, -4.38513166e-04, 5.61378144e-02],
                [2.30865383e02, -3.27976598e-05, -6.79061901e-04, 6.94379197e-02],
                [2.34808036e02, -6.39244866e-05, -1.20203107e-03, 9.20893766e-02],
                [2.40362309e02, -1.71072539e-04, -2.69107006e-03, 1.38088979e-01],
                [2.49783872e02, -1.00989029e-03, -1.00100939e-02, 2.65991699e-01],
                [2.07223843e02, 6.27903175e00, -2.10085556e01, 1.22487429e-05],
                [2.49783340e02, -1.01053458e-03, -1.00136877e-02, -2.66067280e-01],
                [2.40361289e02, -1.71259219e-04, -2.69291112e-03, -1.38163753e-01],
                [2.34806566e02, -6.40205116e-05, -1.20325640e-03, -9.21636026e-02],
                [2.30863475e02, -3.28598660e-05, -6.79985804e-04, -6.95121708e-02],
                [2.27784043e02, -1.99804947e-05, -4.39260082e-04, -5.62120412e-02],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
Zeeman sensor
-------------
.. code-block:: python
    :name: Zeeman sensor
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    ws.propagation_path_observer_agendaSet(option="Geometric")
    ws.spectral_radiance_observer_agendaSet(option="Emission")
    
    # %% Set up a sensor with Gaussian channel widths on individual frequency ranges
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.measurement_vector_sensorGaussian(
        f0_fwhm_df=[[f, 1e5, 1e4] for f in ws.frequency_grid],
        pos=pos,
        los=los,
        pol="RC",
    )
    
    # %% Core calculations
    
    result = pyarts.arts.Vector()
    result_jac = pyarts.arts.Matrix()
    ws.measurement_vectorFromSensor(result, result_jac)
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, result)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(
        f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line with Gaussian channels on individual grids"
    )
    
    
    # %% Test
    
    assert np.allclose(
        result[::100],
        np.array(
            [
                227.84254707,
                230.93486349,
                234.90020182,
                240.50057327,
                250.05044696,
                209.877013,
                249.51782475,
                240.22329289,
                234.71447726,
                230.79400404,
                227.7278571,
            ]
        ),
    )
    
    
    # %% Set up a sensor with a fixed grid size
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.measurement_vector_sensorGaussianFrequencyGrid(
        f0_fwhm=[[f, 1e5] for f in ws.frequency_grid],
        pos=pos,
        los=los,
        pol="RC",
    )
    
    # %% Core calculations
    
    result = pyarts.arts.Vector()
    result_jac = pyarts.arts.Matrix()
    ws.measurement_vectorFromSensor(result, result_jac)
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, result)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(
        f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line with Gaussian channels on a single grid"
    )
    
    
    # %% Test
    
    assert np.allclose(
        result[::100],
        np.array(
            [
                227.85700315,
                230.93486339,
                234.90020165,
                240.50057288,
                250.05044565,
                209.854878,
                249.51782351,
                240.22329251,
                234.71447709,
                230.79400394,
                227.74220588,
            ]
        ),
    )
    
Zeeman transmission
-------------------
.. code-block:: python
    :name: Zeeman transmission
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    nf = 1001
    ws.frequency_grid = np.linspace(-50e6, 50e6, nf) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "1"
    ws.spectral_radiance_space_agendaSet(option="Transmission")
    ws.spectral_radiance_surface_agendaSet(option="Transmission")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.propagation_pathGeometric(pos=pos, los=los, max_step=1000.0)
    ws.spectral_radianceClearskyTransmission()
    
    # %% Show results
    
    plt.semilogy((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [3.41938759e-06, 7.73629681e-12, 1.48466689e-10, -4.44007326e-08],
                [1.68296779e-06, 6.36563685e-12, 1.12515548e-10, -2.69027168e-08],
                [6.84951553e-07, 5.12567520e-12, 7.99195217e-11, -1.43179215e-08],
                [1.98252387e-07, 4.04809327e-12, 5.08300685e-11, -6.05374848e-09],
                [2.54316071e-08, 3.27476721e-12, 2.52886453e-11, -1.49105559e-09],
                [3.22328343e-13, 1.81363558e-13, -2.57708670e-13, 7.96334058e-18],
                [2.54531426e-08, 3.28073742e-12, 2.53293549e-11, 1.49570802e-09],
                [1.98544497e-07, 4.06121370e-12, 5.09832834e-11, 6.08600656e-09],
                [6.86339664e-07, 5.14925742e-12, 8.02667321e-11, 1.44210546e-08],
                [1.68722782e-06, 6.40330448e-12, 1.13148512e-10, 2.71412968e-08],
                [3.42964480e-06, 7.79200472e-12, 1.49486896e-10, 4.48616704e-08],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
