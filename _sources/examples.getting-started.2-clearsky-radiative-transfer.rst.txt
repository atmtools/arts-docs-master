2. Clearsky radiative transfer
==============================
Zeeman
------
.. code-block:: python
    :name: Zeeman
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
    ws.spectral_radianceClearskyEmission()
    ws.spectral_radianceApplyUnitFromSpectralRadiance()
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance + 0)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [2.27786279e02, -2.23644583e-04, -3.77015913e-04, 5.69269522e-02],
                [2.30865312e02, -3.48096654e-04, -5.82873607e-04, 7.04140485e-02],
                [2.34807995e02, -6.21529170e-04, -1.02888198e-03, 9.33839855e-02],
                [2.40362302e02, -1.41676334e-03, -2.28982732e-03, 1.40030558e-01],
                [2.49783915e02, -5.60528357e-03, -8.33754971e-03, 2.69733178e-01],
                [2.07245890e02, -4.30794421e00, -2.14467490e01, 1.24566607e-05],
                [2.49783382e02, -5.60754703e-03, -8.34040843e-03, -2.69809821e-01],
                [2.40361281e02, -1.41779460e-03, -2.29136074e-03, -1.40106384e-01],
                [2.34806526e02, -6.22190182e-04, -1.02991615e-03, -9.34592546e-02],
                [2.30863403e02, -3.48585873e-04, -5.83658317e-04, -7.04893428e-02],
                [2.27783939e02, -2.24035725e-04, -3.77652642e-04, -5.70022211e-02],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
Zeeman sensor
-------------
.. code-block:: python
    :name: Zeeman sensor
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    ws.ray_path_observer_agendaSet(option="Geometric")
    ws.spectral_radiance_observer_agendaSet(option="EmissionUnits")
    
    # %% Set up a sensor with Gaussian channel widths on individual frequency ranges
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.measurement_sensorSimpleGaussian(fwhm=1e5, pos=pos, los=los, pol="RC")
    
    # %% Core calculations
    
    result = pyarts.arts.Vector()
    result_jac = pyarts.arts.Matrix()
    ws.measurement_vectorFromSensor(result, result_jac)
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, result)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(
        f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line with Gaussian channels on individual grids"
    )
    
    # %% Test
    
    assert np.allclose(
        result[::100],
        np.array(
            [
                227.78791323,
                230.8653163,
                234.80800379,
                240.3623207,
                249.78397782,
                207.61855855,
                249.78344508,
                240.36129972,
                234.80653428,
                230.86340781,
                227.78557379,
            ]
        ),
    )
    
Zeeman transmission
-------------------
.. code-block:: python
    :name: Zeeman transmission
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    nf = 1001
    ws.frequency_grid = np.linspace(-50e6, 50e6, nf) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "1"
    ws.spectral_radiance_space_agendaSet(option="Transmission")
    ws.spectral_radiance_surface_agendaSet(option="Transmission")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
    ws.spectral_radianceClearskyTransmission()
    
    # %% Show results
    
    plt.semilogy((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [3.48074339e-06, 7.79626187e-11, 1.29462746e-10, -4.58316733e-08],
                [1.71316764e-06, 5.95493071e-11, 9.78633101e-11, -2.77698065e-08],
                [6.97243885e-07, 4.28547196e-11, 6.92129313e-11, -1.47794484e-08],
                [2.01811291e-07, 2.79796924e-11, 4.36322508e-11, -6.24892024e-09],
                [2.58887859e-08, 1.50722487e-11, 2.10895501e-11, -1.53914529e-09],
                [3.25340224e-13, 4.13333797e-14, -3.14840689e-13, 8.41284772e-18],
                [2.59107134e-08, 1.50971400e-11, 2.11231675e-11, 1.54394772e-09],
                [2.02108653e-07, 2.80648334e-11, 4.37633416e-11, 6.28221755e-09],
                [6.98656898e-07, 4.30420221e-11, 6.95130288e-11, 1.48859032e-08],
                [1.71750402e-06, 5.98858575e-11, 9.84130185e-11, 2.80160699e-08],
                [3.49118434e-06, 7.85004414e-11, 1.30351250e-10, 4.63074542e-08],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
Zeeman sun
----------
.. code-block:: python
    :name: Zeeman sun
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = [line_f0]
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Add a sun
    
    ws.sunBlackbody()
    ws.sunsAddSun(suns=ws.suns)
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="SunOrCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    
    # %% Core calculations
    
    pos = [90e3, 0, 0]
    zas = np.linspace(0, 2, 21)
    aas = np.linspace(-180, 180, 21)
    res = np.empty((len(zas), len(aas)))
    for iza in range(len(zas)):
        for iaa in range(len(aas)):
            los = [zas[iza], aas[iaa]]
            ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
            ws.spectral_radianceClearskyEmission()
            ws.spectral_radianceApplyUnitFromSpectralRadiance()
            res[iza, iaa] = ws.spectral_radiance[0][0]
    
    # FIXME: Use some sort of Imager for measurement_vector for the above
    
    r, theta = np.meshgrid(zas, np.rad2deg(aas))
    fig, ax = plt.subplots(subplot_kw=dict(projection="polar"))
    ax.contourf(theta, r, res.T)
    
    assert np.allclose(
        res[::3, ::7],
        np.array(
            [
                [5.74974671e03, 5.67393003e03, 5.42098021e03],
                [2.73578415e00, 2.73611538e00, 2.73734690e00],
                [2.74234763e00, 2.74294365e00, 2.74528926e00],
                [2.76134660e00, 2.76143226e00, 2.76179796e00],
                [2.79371400e00, 2.79309756e00, 2.78966340e00],
                [2.83017769e00, 2.83067328e00, 2.82828924e00],
                [2.85383040e00, 2.85967097e00, 2.87221221e00],
            ]
        ),
    )
    
Zeeman sun scattering
---------------------
.. code-block:: python
    :name: Zeeman sun scattering
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    ws.frequency_grid = [pyarts.arts.convert.wavelen2freq(700e-9)]
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Add a sun
    
    ws.sunBlackbody()
    ws.sunsAddSun(suns=ws.suns)
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="SunOrCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    ws.ray_path_observer_agendaSet(option="Geometric")
    ws.propagation_matrix_scattering_agendaSet(option="AirSimple")
    
    # %% Core calculations
    pos = [90e3, 0, 0]
    zas = np.linspace(0, 5, 21)
    aas = np.linspace(-180, 180, 21)
    res = np.empty((len(zas), len(aas)))
    for iza in range(len(zas)):
        for iaa in range(len(aas)):
            los = [zas[iza], aas[iaa]]
            ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
            ws.ray_path_suns_pathFromPathObserver(just_hit=1)
            ws.spectral_radianceClearskyRayleighScattering()
            ws.spectral_radianceApplyUnitFromSpectralRadiance()
            res[iza, iaa] = ws.spectral_radiance[0][0]
    
    # FIXME: Use some sort of Imager for measurement_vector for the above
    
    r, theta = np.meshgrid(zas, np.rad2deg(aas))
    fig, ax = plt.subplots(subplot_kw=dict(projection="polar"))
    ax.contourf(theta, r, res.T)
    
    assert np.allclose(
        res[1::3, 1::7],
        np.array(
            [
                [5771.99999999, 5771.99999999, 5771.99999999],
                [535.42850284, 535.42853138, 535.42863128],
                [551.51083023, 551.51086978, 551.51097854],
                [562.27742756, 562.27747035, 562.27756852],
                [570.47208475, 570.47212, 570.47223188],
                [577.13157683, 577.13161927, 577.13172898],
                [582.7648976, 582.76494322, 582.76505392],
            ]
        ),
    )
    
