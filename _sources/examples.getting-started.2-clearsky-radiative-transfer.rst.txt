2. Clearsky radiative transfer
==============================
Zeeman
------
.. code-block:: python
    :name: Zeeman
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
    ws.spectral_radianceClearskyEmission()
    ws.spectral_radianceApplyUnitFromSpectralRadiance()
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance+0)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [2.27786385e02, -2.23642454e-04, -3.77012348e-04, 5.69263236e-02],
                [2.30865387e02, -3.48094282e-04, -5.82869673e-04, 7.04134321e-02],
                [2.34808042e02, -6.21526538e-04, -1.02887768e-03, 9.33834409e-02],
                [2.40362325e02, -1.41676037e-03, -2.28982262e-03, 1.40030136e-01],
                [2.49783921e02, -5.60527989e-03, -8.33754441e-03, 2.69732924e-01],
                [2.07245890e02, -4.30794421e00, -2.14467490e01, 1.24566607e-05],
                [2.49783389e02, -5.60754335e-03, -8.34040313e-03, -2.69809568e-01],
                [2.40361304e02, -1.41779162e-03, -2.29135603e-03, -1.40105962e-01],
                [2.34806573e02, -6.22187547e-04, -1.02991185e-03, -9.34587096e-02],
                [2.30863479e02, -3.48583496e-04, -5.83654375e-04, -7.04887260e-02],
                [2.27784046e02, -2.24033591e-04, -3.77649070e-04, -5.70015926e-02],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
Zeeman sensor
-------------
.. code-block:: python
    :name: Zeeman sensor
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = np.linspace(-50e6, 50e6, 1001) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="UniformCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    ws.ray_path_observer_agendaSet(option="Geometric")
    ws.spectral_radiance_observer_agendaSet(option="EmissionUnits")
    
    # %% Set up a sensor with Gaussian channel widths on individual frequency ranges
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.measurement_vector_sensorGaussian(
        f0_fwhm_df=[[f, 1e5, 1e4] for f in ws.frequency_grid],
        pos=pos,
        los=los,
        pol="RC",
    )
    
    # %% Core calculations
    
    result = pyarts.arts.Vector()
    result_jac = pyarts.arts.Matrix()
    ws.measurement_vectorFromSensor(result, result_jac)
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, result)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(
        f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line with Gaussian channels on individual grids"
    )
    
    
    # %% Test
    
    assert np.allclose(
        result[::100],
        np.array(
            [
                227.84333794,
                230.93584277,
                234.90150277,
                240.50252995,
                250.05423728,
                209.93307662,
                249.51413112,
                240.2213661,
                234.713189,
                230.79303123,
                227.7270699,
            ]
        ),
    )
    
    
    # %% Set up a sensor with a fixed grid size
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.measurement_vector_sensorGaussianFrequencyGrid(
        f0_fwhm=[[f, 1e5] for f in ws.frequency_grid],
        pos=pos,
        los=los,
        pol="RC",
    )
    
    # %% Core calculations
    
    result = pyarts.arts.Vector()
    result_jac = pyarts.arts.Matrix()
    ws.measurement_vectorFromSensor(result, result_jac)
    
    # %% Show results
    
    plt.plot((ws.frequency_grid - line_f0) / 1e6, result)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(
        f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line with Gaussian channels on a single grid"
    )
    
    
    # %% Test
    
    assert np.allclose(
        result[::100],
        np.array(
            [
                227.85779479,
                230.93584267,
                234.9015026,
                240.50252956,
                250.05423597,
                209.91116972,
                249.51412988,
                240.22136572,
                234.71318884,
                230.79303114,
                227.74141792,
            ]
        ),
    )
    
Zeeman transmission
-------------------
.. code-block:: python
    :name: Zeeman transmission
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    nf = 1001
    ws.frequency_grid = np.linspace(-50e6, 50e6, nf) + line_f0
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "1"
    ws.spectral_radiance_space_agendaSet(option="Transmission")
    ws.spectral_radiance_surface_agendaSet(option="Transmission")
    
    # %% Core calculations
    
    pos = [100e3, 0, 0]
    los = [180.0, 0.0]
    ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
    ws.spectral_radianceClearskyTransmission()
    
    # %% Show results
    
    plt.semilogy((ws.frequency_grid - line_f0) / 1e6, ws.spectral_radiance)
    plt.xlabel("Frequency offset [MHz]")
    plt.ylabel("Spectral radiance [K]")
    plt.title(f"Zeeman effect of {round(line_f0/1e6)} MHz O$_2$ line")
    
    # %% Test
    
    assert np.allclose(
        ws.spectral_radiance[::100],
        np.array(
            [
                [3.41938759e-06, 7.73629681e-12, 1.48466689e-10, -4.44007326e-08],
                [1.68296779e-06, 6.36563685e-12, 1.12515548e-10, -2.69027168e-08],
                [6.84951553e-07, 5.12567520e-12, 7.99195217e-11, -1.43179215e-08],
                [1.98252387e-07, 4.04809327e-12, 5.08300685e-11, -6.05374848e-09],
                [2.54316071e-08, 3.27476721e-12, 2.52886453e-11, -1.49105559e-09],
                [3.22328343e-13, 1.81363558e-13, -2.57708670e-13, 7.96334058e-18],
                [2.54531426e-08, 3.28073742e-12, 2.53293549e-11, 1.49570802e-09],
                [1.98544497e-07, 4.06121370e-12, 5.09832834e-11, 6.08600656e-09],
                [6.86339664e-07, 5.14925742e-12, 8.02667321e-11, 1.44210546e-08],
                [1.68722782e-06, 6.40330448e-12, 1.13148512e-10, 2.71412968e-08],
                [3.42964480e-06, 7.79200472e-12, 1.49486896e-10, 4.48616704e-08],
            ]
        ),
    ), "Values have drifted from expected results in spectral radiance"
    
Zeeman sun
----------
.. code-block:: python
    :name: Zeeman sun
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    line_f0 = 118750348044.712
    ws.frequency_grid = [line_f0]
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Add a sun
    
    ws.sunBlackbody()
    ws.sunsAddSun(suns=ws.suns)
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="SunOrCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    
    # %% Core calculations
    
    pos = [90e3, 0, 0]
    zas = np.linspace(0, 2, 21)
    aas = np.linspace(-180, 180, 21)
    res = np.empty((len(zas), len(aas)))
    for iza in range(len(zas)):
        for iaa in range(len(aas)):
            los = [zas[iza], aas[iaa]]
            ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
            ws.spectral_radianceClearskyEmission()
            ws.spectral_radianceApplyUnitFromSpectralRadiance()
            res[iza, iaa] = ws.spectral_radiance[0][0]
    
    # FIXME: Use some sort of Imager for measurement_vector for the above
    
    r, theta = np.meshgrid(zas, np.rad2deg(aas))
    fig, ax = plt.subplots(subplot_kw=dict(projection="polar"))
    ax.contourf(theta, r, res.T)
    
    assert np.allclose(
        res[::3, ::7],
        np.array(
            [
                [5749.74670977, 5673.9300261, 5420.98020555],
                [7.13171303, 8.7751568, 14.49545782],
                [12.19459019, 12.87760698, 15.50152675],
                [17.06697185, 17.10784627, 17.28252788],
                [20.24466269, 20.08448805, 19.18630347],
                [20.87660536, 20.95869027, 20.56264444],
                [18.80695427, 19.50096608, 20.97105106],
            ]
        ),
    )
    
Zeeman sun scattering
---------------------
.. code-block:: python
    :name: Zeeman sun scattering
    :linenos:

    import pyarts
    import numpy as np
    import matplotlib.pyplot as plt
    
    ws = pyarts.workspace.Workspace()
    
    # %% Sampled frequency range
    
    ws.frequency_grid = [pyarts.arts.convert.wavelen2freq(700e-9)]
    
    # %% Species and line absorption
    
    ws.absorption_speciesSet(species=["O2-66"])
    ws.ReadCatalogData()
    ws.absorption_bandsSelectFrequency(fmin=40e9, fmax=120e9, by_line=1)
    ws.absorption_bandsSetZeeman(species="O2-66", fmin=118e9, fmax=119e9)
    ws.WignerInit()
    
    # %% Use the automatic agenda setter for propagation matrix calculations
    ws.propagation_matrix_agendaAuto()
    
    # %% Grids and planet
    
    ws.surface_fieldSetPlanetEllipsoid(option="Earth")
    ws.surface_field[pyarts.arts.SurfaceKey("t")] = 295.0
    ws.atmospheric_fieldRead(
        toa=100e3, basename="planets/Earth/afgl/tropical/", missing_is_zero=1
    )
    ws.atmospheric_fieldIGRF(time="2000-03-11 14:39:37")
    
    # %% Add a sun
    
    ws.sunBlackbody()
    ws.sunsAddSun(suns=ws.suns)
    
    # %% Checks and settings
    
    ws.spectral_radiance_unit = "Tb"
    ws.spectral_radiance_space_agendaSet(option="SunOrCosmicBackground")
    ws.spectral_radiance_surface_agendaSet(option="Blackbody")
    ws.ray_path_observer_agendaSet(option="Geometric")
    ws.propagation_matrix_scattering_agendaSet(option="AirSimple")
    
    # %% Core calculations
    pos = [90e3, 0, 0]
    zas = np.linspace(0, 5, 21)
    aas = np.linspace(-180, 180, 21)
    res = np.empty((len(zas), len(aas)))
    for iza in range(len(zas)):
        for iaa in range(len(aas)):
            los = [zas[iza], aas[iaa]]
            ws.ray_pathGeometric(pos=pos, los=los, max_step=1000.0)
            ws.ray_path_suns_pathFromPathObserver(just_hit=1)
            ws.spectral_radianceClearskyRayleighScattering()
            ws.spectral_radianceApplyUnitFromSpectralRadiance()
            res[iza, iaa] = ws.spectral_radiance[0][0]
    
    # FIXME: Use some sort of Imager for measurement_vector for the above
    
    r, theta = np.meshgrid(zas, np.rad2deg(aas))
    fig, ax = plt.subplots(subplot_kw=dict(projection="polar"))
    ax.contourf(theta, r, res.T)
    
    assert np.allclose(
        res[1::3, 1::7],
        np.array(
            [
                [5771.9999101, 5771.9999101, 5771.9999101],
                [643.69008219, 643.69008219, 643.69008219],
                [643.69030693, 643.69030699, 643.69030699],
                [643.69065631, 643.69065644, 643.6906565],
                [643.69113363, 643.69113369, 643.69113376],
                [643.69174199, 643.69174205, 643.69174231],
                [643.69248637, 643.69248643, 643.69248676],
            ]
        ),
    )
    
