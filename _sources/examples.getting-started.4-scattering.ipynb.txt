{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0885676e-8187-4eb8-8558-1a95aeaf52d0",
   "metadata": {},
   "source": [
    "# 4. Scattering calculations\n",
    "\n",
    "This example demonstrates the basic principles of performing scattering calcualtions with ARTS. Populations of particles that scatter radiation are referred to as *scattering species*. In essence, a scattering species defines a mapping from one or several fields of *scattering species properties* to *scattering properties* which form the input to the actual scattering calculation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ade3f219-304f-462e-8ea6-d7e1c7587834",
   "metadata": {},
   "source": [
    "## Set up a 1D atmosphere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05fd23f9-9c20-4df4-b8ba-09296faa6944",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import pyarts\n",
    "\n",
    "# ws = pyarts.workspace.Workspace()\n",
    "# ws.PlanetSet(option = \"Earth\")\n",
    "# ws.atm_fieldInit(toa=100e3)\n",
    "# ws.atm_fieldAddGriddedData(\n",
    "#     key=pyarts.arts.String(\"t\"),\n",
    "#     data=pyarts.arts.GriddedField3.fromxml(\"planets/Earth/afgl/tropical/t.xml\")\n",
    "# )\n",
    "# ws.atm_fieldAddGriddedData(\n",
    "#     key=pyarts.arts.String(\"p\"),\n",
    "#     data=pyarts.arts.GriddedField3.fromxml(\"planets/Earth/afgl/tropical/p.xml\")\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e88bc4b-1bf7-4575-a99a-481c4b93cbb2",
   "metadata": {},
   "source": [
    "## Add a field of scattering species properties\n",
    "\n",
    "In order to perform a simulation with ice particles, it is necessary to first define the *scattering species property* that represents the properties of the scattering species in the atmosphere. Below we define the **mass density** of **ice** as the scattering species property we use to describe the distribution of ice hydrometeors in the atmosphere."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56b62cec-4f34-4e3d-9158-dd9b6973548d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ice_mass_density = pyarts.arts.ScatteringSpeciesProperty(\"ice\", pyarts.arts.ParticulateProperty(\"MassDensity\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dfa6a96-2456-42b2-a455-4b03ab254068",
   "metadata": {},
   "source": [
    "We then define a GriddedField3 representing the ice mass density profile in the atmosphere and add it to  ``atm_field`` of the workspace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8eddf1c-5288-408d-9b4a-7047c0f69b23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# grids = ws.atm_field[\"t\"].data.grids\n",
    "# z = grids[0]\n",
    "# ice_mass_density_profile = np.zeros_like(z)\n",
    "# ice_mass_density_profile[(z > 10e3) * (z < 15e3)] = 1e-4\n",
    "# ice_mass_density_profile = pyarts.arts.GriddedField3(data=ice_mass_density_profile[..., None, None], grids=grids)\n",
    "# ws.atm_field[ice_mass_density] = ice_mass_density_profile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74c5c106-4c66-44ea-a837-79a30e1424dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# plt.plot(ice_mass_density_profile[:, 0, 0] * 1e3, z/ 1e3)\n",
    "# plt.ylim([0, 40])\n",
    "# plt.ylabel(\"Altitude [km]\")\n",
    "# plt.xlabel(\"Ice water content [g m$^{-3}$]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7342431-699a-40da-a183-c5ca3e03a6a1",
   "metadata": {},
   "source": [
    "### Particle size distributions\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "034fc429-f63c-4586-86e6-b46f5d67c9ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# psd_abel12 = pyarts.arts.MGDSingleMoment(ice_mass_density, 0.22, 2.2, 0.0, 1.0, 180.0, 270.0, False)\n",
    "# psd_wang16 = pyarts.arts.MGDSingleMoment(ice_mass_density, \"Wang16\", 180.0, 270.0, False)\n",
    "# psd_field19 = pyarts.arts.MGDSingleMoment(ice_mass_density, \"Field19\", 180.0, 270.0, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9271a49-a0a4-4a13-8567-e7ab42ca61b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# atm_point = ws.atm_field.at([12e3], [0.0], [0.0])\n",
    "# sizes = np.logspace(-6, -2, 41)\n",
    "# scat_species_a = 479.9830 \n",
    "# scat_species_b = 3.0\n",
    "\n",
    "# y_abel12 = psd_abel12.evaluate(atm_point[0], sizes, scat_species_a, scat_species_b)\n",
    "# y_wang16 = psd_wang16.evaluate(atm_point[0], sizes, scat_species_a, scat_species_b)\n",
    "# y_field19 = psd_field19.evaluate(atm_point[0], sizes, scat_species_a, scat_species_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ba10eb6-dc0a-4bea-9070-3d2a6d4be1b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plt.plot(sizes, y_abel12, label=\"Abel 12\")\n",
    "# plt.plot(sizes, y_wang16, label=\"Wang 16\")\n",
    "# plt.plot(sizes, y_field19, label=\"Field 19\")\n",
    "# plt.xscale(\"log\")\n",
    "# plt.yscale(\"log\")\n",
    "# plt.xlabel(\"Particle size [m]\")\n",
    "# plt.ylabel(\"Particle number density [m$^{-4}$]\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
